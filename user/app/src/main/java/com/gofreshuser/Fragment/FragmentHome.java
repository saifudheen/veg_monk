package com.gofreshuser.Fragment;import android.app.Fragment;import android.app.FragmentManager;import android.app.ProgressDialog;import android.content.Intent;import android.content.SharedPreferences;import android.location.Address;import android.location.Geocoder;import android.os.Bundle;import android.os.Handler;import android.support.v4.view.ViewPager;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.widget.CardView;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.android.volley.DefaultRetryPolicy;import com.android.volley.NoConnectionError;import com.android.volley.Request;import com.android.volley.Response;import com.android.volley.TimeoutError;import com.android.volley.VolleyError;import com.android.volley.VolleyLog;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import com.gofreshuser.Adapter.HomeAdapter;import com.gofreshuser.Adapter.SilderAdapter;import com.gofreshuser.Config.Baseurl;import com.gofreshuser.model.Home_Model;import com.gofreshuser.model.Sildermodel;import com.gofreshuser.model.StylistArray;import com.gofreshuser.tecmanic.AppController;import com.gofreshuser.tecmanic.MainActivity;import com.gofreshuser.tecmanic.MapsActivity;import com.gofreshuser.tecmanic.R;import com.gofreshuser.util.ConnectivityReceiver;import com.gofreshuser.util.CustomVolleyJsonRequest;import com.gofreshuser.util.RecyclerTouchListener;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.IOException;import java.lang.reflect.Type;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Locale;import java.util.Map;import java.util.Timer;import java.util.TimerTask;import static android.content.Context.MODE_PRIVATE;import static com.gofreshuser.tecmanic.MainActivity.userid;public class FragmentHome extends Fragment  {    private static String TAG = FragmentHome.class.getSimpleName();    CardView loc_card;    String latitude,longitude,getallstoreid;    RelativeLayout r_cart;    ProgressDialog progressDialog;    SharedPreferences.Editor loceditor;    TextView search_text;    TextView setlocation;    Handler handler = new Handler();    Runnable timeCounter;    ImageView cart_image;    LinearLayout cart_showl1;    TextView cart_count,store_name;    String locality;    List<StylistArray> listdata = new ArrayList<>();    ArrayList<String> getdata=new ArrayList<>();    private List<Home_Model> list = new ArrayList<>();ViewPager bannerslider;    private List<Sildermodel> sildermodelslist = new ArrayList<>();    private static int currentPage = 0;    private static int NUM_PAGES = 0;    SharedPreferences storeprefrences;    SharedPreferences.Editor storeeditor;    private HomeAdapter adapter;    RecyclerView showstore,showcart_rc;    SwipeRefreshLayout refresh_layout;    ArrayList<String> hdh=new ArrayList<>();    SharedPreferences locationpre;    public FragmentHome() {        // Required empty public constructor    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        View view= inflater.inflate(R.layout.fragment_fragment_home, container, false);        MainActivity.countshow();        search_text=view.findViewById(R.id.search);        bannerslider=view.findViewById(R.id.iv);        cart_showl1=view.findViewById(R.id.l1);        progressDialog=new ProgressDialog(getActivity());        locationpre=getActivity().getSharedPreferences("location",MODE_PRIVATE);        storeprefrences=getActivity().getSharedPreferences("sroreprefer",MODE_PRIVATE);        storeeditor=storeprefrences.edit();        r_cart=view.findViewById(R.id.r_cart);        cart_count=view.findViewById(R.id.count_cart);        cart_image=view.findViewById(R.id.cart_image);        store_name=view.findViewById(R.id.store_name);        showstore=view.findViewById(R.id.showstore);        loceditor=locationpre.edit();        progressDialog.show();//       showstore.showShimmerAdapter();        progressDialog.setMessage("Loading");        refresh_layout = view.findViewById(R.id.refresh_layout);        refresh_layout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {            @Override            public void onRefresh() {                if(handler!=null && timeCounter!=null){                    handler.removeCallbacks(timeCounter);                }//                showstore.showShimmerAdapter();                progressDialog.show();                MainActivity.countshow();                storeshow();                searchshow();                banner();                view_cart();                refresh_layout.setRefreshing(false);            }        });        cart_showl1.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Fragment fm = new Cart_fragment();                FragmentManager fragmentManager = getFragmentManager();                fragmentManager.beginTransaction().replace(R.id.main_container, fm,"Cart_Fragmnet")                        .addToBackStack(null).commit();            }        });        GridLayoutManager gridLayoutManagercat = new GridLayoutManager(getActivity(), 2, GridLayoutManager.VERTICAL, false);        showstore.setLayoutManager(gridLayoutManagercat);        showstore.setHasFixedSize(true);        search_text.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Fragment fm = new FragmentSearch();                Bundle args = new Bundle();                args.putStringArrayList("getdata",getdata);                storeeditor.commit();                fm.setArguments(args);                FragmentManager fragmentManager = getFragmentManager();                fragmentManager.beginTransaction().replace(R.id.main_container, fm,"Frgament_StoreCat")                        .addToBackStack(null).commit();            }        });        showstore.addOnItemTouchListener(new RecyclerTouchListener(getActivity(), showstore, new RecyclerTouchListener.OnItemClickListener() {            @Override            public void onItemClick(View view, int position) {////                Bundle args = new Bundle();                Fragment fm = new Fragment_StoreCat();                Bundle args = new Bundle();                args.putString("store_id", list.get(position).getUser_id());                args.putString("store_image",list.get(position).getUser_image());                args.putString("banner_image",list.get(position).getUser_main_banner());                storeeditor.putString("store_id",list.get(position).getUser_id());                storeeditor.commit();                fm.setArguments(args);                FragmentManager fragmentManager = getFragmentManager();                fragmentManager.beginTransaction().replace(R.id.main_container, fm,"Frgament_StoreCat")                        .addToBackStack(null).commit();            }            @Override            public void onLongItemClick(View view, int position) {            }        }));        view.setFocusableInTouchMode(true);        view.requestFocus();        view.setOnKeyListener(new View.OnKeyListener()        {            @Override            public boolean onKey(View v, int keyCode, KeyEvent event) {                if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {                    Intent a = new Intent(Intent.ACTION_MAIN);                    a.addCategory(Intent.CATEGORY_HOME);                    a.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                    startActivity(a);                    return true;                }                return false;            }        });        latitude=locationpre.getString("lat","");        longitude=locationpre.getString("lng","");        setlocation=view.findViewById(R.id.set);        loc_card=view.findViewById(R.id.loc_card);        Geocoder gcd = new Geocoder(getActivity(), Locale.getDefault());        List<Address> addresses = null;        try {            addresses = gcd.getFromLocation(Double.parseDouble(latitude),Double.parseDouble(longitude) , 1);        } catch (IOException e) {            e.printStackTrace();        }        if (addresses != null && addresses.size() > 0) {            locality = addresses.get(0).getAddressLine(0);            setlocation.setText(locality);        }        loc_card.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent=new Intent(getActivity(), MapsActivity.class);                loceditor.putString("locationline",locality);                loceditor.commit();                startActivity(intent);            }        });        if (ConnectivityReceiver.isConnected()){            storeshow();            searchshow();            view_cart();            banner();        }        else {            Toast.makeText(getActivity(), "No Connection", Toast.LENGTH_SHORT).show();        }        return view;    }    private void storeshow(){        list.clear();        String tag_json_obj = "json_category_req";        Map<String, String> params = new HashMap<String, String>();        params.put("lat",latitude);        params.put("lng",longitude);        CustomVolleyJsonRequest jsonObjReq = new CustomVolleyJsonRequest(Request.Method.POST,                Baseurl.URL_Show_store, params, new Response.Listener<JSONObject>() {            @Override            public void onResponse(JSONObject response) {                Log.d("TAG", response.toString());                try {                    if (response != null && response.length() > 0) {                        Gson gson = new Gson();//                        Type listType = new TypeToken<List<Home_Model>>() {                        }.getType();                        list= gson.fromJson(response.getString("stores"), listType);                        adapter = new HomeAdapter(list);                        showstore.setAdapter(adapter);                        adapter.notifyDataSetChanged();                        progressDialog.dismiss();//                             showstore.hideShimmerAdapter();                    }                    else {                        progressDialog.dismiss();//                        animate.stopShimmer();//                        showstore.hideShimmerAdapter();                        Toast.makeText(getActivity(), "No Data", Toast.LENGTH_SHORT).show();                    }                } catch (JSONException e) {                    e.printStackTrace();                }            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                VolleyLog.d("TAG", "Error: " + error.getMessage());                if (error instanceof TimeoutError || error instanceof NoConnectionError) {                    Toast.makeText(getActivity(), getResources().getString(R.string.connection_time_out), Toast.LENGTH_SHORT).show();                }            }        });        // Adding request to request queue//        AppController.getInstance().addToRequestQueue(jsonObjReq, tag_json_obj);        jsonObjReq.setRetryPolicy(new DefaultRetryPolicy(20000,                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));        AppController.getInstance().getRequestQueue().getCache().clear();        AppController.getInstance().getRequestQueue().add(jsonObjReq);    }    private void searchshow(){        String tag_json_obj = "json_category_req";        Map<String, String> params = new HashMap<String, String>();        params.put("lat",latitude);        params.put("lng",longitude);        CustomVolleyJsonRequest jsonObjReq = new CustomVolleyJsonRequest(Request.Method.POST,                Baseurl.URL_Show_store, params, new Response.Listener<JSONObject>() {            @Override            public void onResponse(JSONObject response) {                Log.d("TAG", response.toString());                try {                    if (response != null && response.length() > 0) {                        JSONArray jsonArray=response.getJSONArray("stores");                        JSONObject jsonObject=null;                        for (int i=0;i<jsonArray.length();){                            jsonObject=jsonArray.getJSONObject(i);                            getallstoreid=jsonObject.getString("user_id");                            getdata.add(getallstoreid);                            i++;                        }                    }                    else {//                        progressDialog.dismiss();                    }                } catch (JSONException e) {                    e.printStackTrace();                }            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                VolleyLog.d("TAG", "Error: " + error.getMessage());                if (error instanceof TimeoutError || error instanceof NoConnectionError) {                    Toast.makeText(getActivity(), getResources().getString(R.string.connection_time_out), Toast.LENGTH_SHORT).show();                }            }        });        // Adding request to request queue        AppController.getInstance().addToRequestQueue(jsonObjReq, tag_json_obj);    }    public  void view_cart() {        String tag_json_obj = "json_category_req";        Map<String, String> params = new HashMap<String, String>();        params.put("user_id", userid);        CustomVolleyJsonRequest jsonObjReq = new CustomVolleyJsonRequest(Request.Method.POST,                Baseurl.View_cart, params, new Response.Listener<JSONObject>() {            @Override            public void onResponse(JSONObject response) {                Log.d("TAG", response.toString());                try {                    if (response != null && response.length() > 0) {                        String total_count=response.getString("total_item");                        cart_count.setText(total_count);                        if (total_count.contains("0")){                            cart_showl1.setVisibility(View.GONE);                        }                        else {                            String store_details=response.getString("store_details");                            cart_showl1.setVisibility(View.VISIBLE);                            JSONObject jsonObject=new JSONObject(store_details);                            store_name.setText(jsonObject.getString("user_fullname"));                            Glide.with(getActivity())                                    .load(Baseurl.IMG_PROFILE_URL + jsonObject.getString("user_image"))                                    .placeholder(R.drawable.icon)                                    .crossFade()                                    .diskCacheStrategy(DiskCacheStrategy.ALL)                                    .dontAnimate()                                    .into(cart_image);                        }                    }                    else {//                    }                } catch (JSONException e) {                    e.printStackTrace();                }            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                VolleyLog.d("TAG", "Error: " + error.getMessage());                if (error instanceof TimeoutError || error instanceof NoConnectionError) {//                    Toast.makeText(MainActivity.this, getResources().getString(R.string.connection_time_out), Toast.LENGTH_SHORT).show();                }            }        });        // Adding request to request queue        AppController.getInstance().addToRequestQueue(jsonObjReq, tag_json_obj);    }    private void banner() {        String tag_json_obj = "json_category_req";        Map<String, String> params = new HashMap<String, String>();        params.put("params", "");        sildermodelslist.clear();        CustomVolleyJsonRequest jsonObjReq = new CustomVolleyJsonRequest(Request.Method.GET,                Baseurl.Banner, params, new Response.Listener<JSONObject>() {            @Override            public void onResponse(JSONObject response) {                Log.d(TAG, response.toString());                try {                    if (response != null && response.length() > 0) {                            JSONArray jsonArray = response.getJSONArray("data");                            JSONObject objJson = null;                            for (int i = 0; i < jsonArray.length(); i++) {                                objJson = jsonArray.getJSONObject(i);                                String bannername = objJson.getString("slider_title");                                String bannerlink = objJson.getString("slider_image");                                sildermodelslist.add(new Sildermodel(bannerlink, bannername));                                NUM_PAGES = sildermodelslist.size();                            }                            if (getActivity()!=null){                            // Auto start of viewpager                            final Handler handler = new Handler();                            final Runnable Update = new Runnable() {                                public void run() {                                    if (currentPage == NUM_PAGES) {                                        currentPage = 0;                                    }                                    bannerslider.setCurrentItem(currentPage++, true);                                }                            };                            Timer swipeTimer = new Timer();                            swipeTimer.schedule(new TimerTask() {                                @Override                                public void run() {                                    handler.post(Update);                                }                            }, 33000, 33000);                            SilderAdapter silderAdapter1 = new SilderAdapter(getActivity(), sildermodelslist);                            bannerslider.setAdapter(silderAdapter1);                        }                    }                    else {                        Toast.makeText(getActivity(), "No Data", Toast.LENGTH_SHORT).show();                    }                } catch (JSONException e) {                    e.printStackTrace();                }            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                VolleyLog.d(TAG, "Error: " + error.getMessage());                if (error instanceof TimeoutError || error instanceof NoConnectionError) {                    Toast.makeText(getActivity(), getResources().getString(R.string.connection_time_out), Toast.LENGTH_SHORT).show();                }            }        });        // Adding request to request queue        AppController.getInstance().addToRequestQueue(jsonObjReq, tag_json_obj);        jsonObjReq.setRetryPolicy(new DefaultRetryPolicy(                0,                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));    }}